# how long did it take?
begin <- as.POSIXct(as.character(d[d$pp == j & d$eventIndex == 1, "localDate"]),format="%d/%m/%Y %H:%M:%S")
# choose the 1st or the 2n: the 1st counts duration from instr to end, the 2nd include answer to demogr
#endRow <- which(d$pp == j & d$breakMessage == "### You have completed block 10 out of 10.")
endRow <- which(demo$pp == j & demo$questionKey == "END QUESTIONNAIRE")
end <- as.POSIXct(as.character(d[endRow, "localDate"]), format="%d/%m/%Y %H:%M:%S")
duration <- difftime(end, begin, units = "mins")
durations[which(unique(d$pp) == j)] <- duration
if (duration > 70 | duration < 30) {
cat("pp ", j, " took", duration, "minutes to complete the experiment.\n")
}
# did she have some weird screens durations?
irregularities <- sum(
d$pp == j & d$Screen.Name == "Screen 3" & d$display == "primeProbe"  & d$trialNum != 2  & d$rt > 510, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
irregularities <- sum(d$pp == j & d$Screen.Name == "Screen 3" & d$display == "primeProbe"  & d$trialNum == 2  & d$rt > 2010, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
irregularities <- sum(d$pp == j & d$Screen.Name == "Screen 1" & d$display == "primeProbe" & d$rt > 510, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
# did she have a delay somewhere?
load_delays <- sum(d$pp == j & d$rt == "LOADING DELAY", na.rm = T)
if (load_delays >0) {cat("pp ", j, " has had", load_delays, "loading delays.\n\n")
}
# did she left any comments?
#if (!is.na(demo[demo$pp == j & demo$questionKey == "comment", "Response"])){
if (demo[demo$pp == j & demo$questionKey == "comment", "Response"] != ""){
cat("pp ", j, "left a comment:", demo[demo$pp == j & demo$questionKey == "comment", "Response"], "\n\n")
}
# fill the pp's logbook line with the info collected in the loop
logbook_df[logbook_df$pp == j, "message1"] <- paste0(screen_mess, weird_duration_mess)
# if there are info in the message column, ask if want ot keep the pp or not
if (logbook_df[logbook_df$pp == j, "message1"] != ""){
# the answer is written in the remove column
logbook_df[logbook_df$pp == j, "remove"] <- remove_him(j)
}
}
end
names(demo)[which(names(demo) == "Local.Date")] <- "localDate"
# loop over pps to check if some events happened
for (j in unique(d$pp)){
# preallocate empty strings that will be filled if sth went wrong
screen_mess = ""
weird_duration_mess = ""
#check & save mapping/counterbalance
#print(d[d$pp == j & d$display == "Instructions", c("mappingsGuide", "greatMap", "oddMap", "magnMap")][1,])
logbook_df[logbook_df$pp == j, "mapping"] <- unique(d[d$pp == j, "counterbalance"])
# did she re-read instructions?
if (sum(d$pp == j & d$Response == "Re-read instructions", na.rm = T) != 0) {cat("pp ", j, "has read instructions more than once. \n")
}
# did she get to the end?
if (unique(d$finalCheckpoint) != "demographics done" & unique(d$finalCheckpoint) != "after demographic"){
cat("pp ", j, " has not gotten to the end.\n" )
}
# did she have big enouhg screen?
screenSize <- unique(d[d$pp == j, "ppViewportSize"])
#w = strsplit(as.character(screenSize), 'x')[1]
# get screen height (the width shouldn't be a concern)
h = strsplit(as.character(screenSize), 'x')[[1]][2]
# the minum is derived by some trials using gorilla preview and simultaneosly this website:
# https://whatismyviewport.com/
if (as.integer(h) < 581) {
cat("pp ", j, "screen height was", h,"while the min necessary is 581\n" )
screen_mess <- paste0("screen height was ", h," while the min necessary is 581;")
}
# how long did it take?
begin <- as.POSIXct(as.character(d[d$pp == j & d$eventIndex == 1, "localDate"]),format="%d/%m/%Y %H:%M:%S")
# choose the 1st or the 2n: the 1st counts duration from instr to end, the 2nd include answer to demogr
#endRow <- which(d$pp == j & d$breakMessage == "### You have completed block 10 out of 10.")
endRow <- which(demo$pp == j & demo$questionKey == "END QUESTIONNAIRE")
end <- as.POSIXct(as.character(d[endRow, "localDate"]), format="%d/%m/%Y %H:%M:%S")
duration <- difftime(end, begin, units = "mins")
durations[which(unique(d$pp) == j)] <- duration
if (duration > 70 | duration < 30) {
cat("pp ", j, " took", duration, "minutes to complete the experiment.\n")
}
# did she have some weird screens durations?
irregularities <- sum(
d$pp == j & d$Screen.Name == "Screen 3" & d$display == "primeProbe"  & d$trialNum != 2  & d$rt > 510, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
irregularities <- sum(d$pp == j & d$Screen.Name == "Screen 3" & d$display == "primeProbe"  & d$trialNum == 2  & d$rt > 2010, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
irregularities <- sum(d$pp == j & d$Screen.Name == "Screen 1" & d$display == "primeProbe" & d$rt > 510, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
# did she have a delay somewhere?
load_delays <- sum(d$pp == j & d$rt == "LOADING DELAY", na.rm = T)
if (load_delays >0) {cat("pp ", j, " has had", load_delays, "loading delays.\n\n")
}
# did she left any comments?
#if (!is.na(demo[demo$pp == j & demo$questionKey == "comment", "Response"])){
if (demo[demo$pp == j & demo$questionKey == "comment", "Response"] != ""){
cat("pp ", j, "left a comment:", demo[demo$pp == j & demo$questionKey == "comment", "Response"], "\n\n")
}
# fill the pp's logbook line with the info collected in the loop
logbook_df[logbook_df$pp == j, "message1"] <- paste0(screen_mess, weird_duration_mess)
# if there are info in the message column, ask if want ot keep the pp or not
if (logbook_df[logbook_df$pp == j, "message1"] != ""){
# the answer is written in the remove column
logbook_df[logbook_df$pp == j, "remove"] <- remove_him(j)
}
}
end
endRow
j
(d[endRow, "localDate"])
# loop over pps to check if some events happened
for (j in unique(d$pp)){
# preallocate empty strings that will be filled if sth went wrong
screen_mess = ""
weird_duration_mess = ""
#check & save mapping/counterbalance
#print(d[d$pp == j & d$display == "Instructions", c("mappingsGuide", "greatMap", "oddMap", "magnMap")][1,])
logbook_df[logbook_df$pp == j, "mapping"] <- unique(d[d$pp == j, "counterbalance"])
# did she re-read instructions?
if (sum(d$pp == j & d$Response == "Re-read instructions", na.rm = T) != 0) {cat("pp ", j, "has read instructions more than once. \n")
}
# did she get to the end?
if (unique(d$finalCheckpoint) != "demographics done" & unique(d$finalCheckpoint) != "after demographic"){
cat("pp ", j, " has not gotten to the end.\n" )
}
# did she have big enouhg screen?
screenSize <- unique(d[d$pp == j, "ppViewportSize"])
#w = strsplit(as.character(screenSize), 'x')[1]
# get screen height (the width shouldn't be a concern)
h = strsplit(as.character(screenSize), 'x')[[1]][2]
# the minum is derived by some trials using gorilla preview and simultaneosly this website:
# https://whatismyviewport.com/
if (as.integer(h) < 581) {
cat("pp ", j, "screen height was", h,"while the min necessary is 581\n" )
screen_mess <- paste0("screen height was ", h," while the min necessary is 581;")
}
# how long did it take?
begin <- as.POSIXct(as.character(d[d$pp == j & d$eventIndex == 1, "localDate"]),format="%d/%m/%Y %H:%M:%S")
# choose the 1st or the 2n: the 1st counts duration from instr to end, the 2nd include answer to demogr
#endRow <- which(d$pp == j & d$breakMessage == "### You have completed block 10 out of 10.")
#end <- as.POSIXct(as.character(d[endRow, "localDate"]), format="%d/%m/%Y %H:%M:%S")
endRow <- which(demo$pp == j & demo$questionKey == "END QUESTIONNAIRE")
end <- as.POSIXct(as.character(demo[endRow, "localDate"]), format="%d/%m/%Y %H:%M:%S")
duration <- difftime(end, begin, units = "mins")
durations[which(unique(d$pp) == j)] <- duration
if (duration > 70 | duration < 30) {
cat("pp ", j, " took", duration, "minutes to complete the experiment.\n")
}
# did she have some weird screens durations?
irregularities <- sum(
d$pp == j & d$Screen.Name == "Screen 3" & d$display == "primeProbe"  & d$trialNum != 2  & d$rt > 510, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
irregularities <- sum(d$pp == j & d$Screen.Name == "Screen 3" & d$display == "primeProbe"  & d$trialNum == 2  & d$rt > 2010, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
irregularities <- sum(d$pp == j & d$Screen.Name == "Screen 1" & d$display == "primeProbe" & d$rt > 510, na.rm = T)
if (irregularities > 0) {
cat("pp ", j, "has had", irregularities, "weird ITI durations \n\n")
weird_duration_mess = paste(weird_duration_mess, irregularities, "weird cue durations;")
}
# did she have a delay somewhere?
load_delays <- sum(d$pp == j & d$rt == "LOADING DELAY", na.rm = T)
if (load_delays >0) {cat("pp ", j, " has had", load_delays, "loading delays.\n\n")
}
# did she left any comments?
#if (!is.na(demo[demo$pp == j & demo$questionKey == "comment", "Response"])){
if (demo[demo$pp == j & demo$questionKey == "comment", "Response"] != ""){
cat("pp ", j, "left a comment:", demo[demo$pp == j & demo$questionKey == "comment", "Response"], "\n\n")
}
# fill the pp's logbook line with the info collected in the loop
logbook_df[logbook_df$pp == j, "message1"] <- paste0(screen_mess, weird_duration_mess)
# if there are info in the message column, ask if want ot keep the pp or not
if (logbook_df[logbook_df$pp == j, "message1"] != ""){
# the answer is written in the remove column
logbook_df[logbook_df$pp == j, "remove"] <- remove_him(j)
}
}
cat( "mean duration of the experiment was", mean(durations, na.rm = T), "minutes")
# a .R file with custom functions - define the path to it if different from the working directory
source("C://Users//Elena//Documents//AA_PhD//R//modelsFun.R")
# keep zone 1 (no resp) and zone 3 and 4 (left an right resp) events of the trial part (no training)
dclean <- d[
d$Screen.Name == "Screen 2" & d$display == "primeProbe", c(
"pp", "counterbalance", "blockNum", "trialNum", "seqN", "rt", "Response", "Attempt", "error", "Timed.Out", "ANSWER", "valence", "ITI", "cue", "stimulus", "mappingsGuide"
)
]
# Remove empty rows, but before printing how many are there. It happens only in xlsx files
print(sum(is.na(dclean$pp)))
dclean <- dclean[!is.na(dclean$pp), ]
names(dclean)
# keep zone 1 (no resp) and zone 3 and 4 (left an right resp) events of the trial part (no training)
dclean <- d[
d$Screen.Name == "Screen 2" & d$display == "primeProbe", c(
"pp", "counterbalance", "blockNum", "trialNum", "seqN", "rt", "Response", "Attempt",
"error", "Timed.Out", "ANSWER", "task", "valence", "ITI", "cue", "stimulus", "mappingsGuide"
)
]
names(d)
# keep zone 1 (no resp) and zone 3 and 4 (left an right resp) events of the trial part (no training)
dclean <- d[
d$Screen.Name == "Screen 2" & d$display == "primeProbe", c(
"pp", "counterbalance", "blockNum", "trialNum", "seqN", "rt", "Response", "Attempt",
"error", "Timed.Out", "ANSWER", "valence", "ITI", "cue", "stimulus", "mappingsGuide"
)
]
# Remove empty rows, but before printing how many are there. It happens only in xlsx files
print(sum(is.na(dclean$pp)))
dclean <- dclean[!is.na(dclean$pp), ]
720-72
# seek for fast responses, errors and not answered trials in a loop for each pp
for (j in unique(dclean$pp)){
# prepare empty strings to fill logbook
fast_mess = ""
slow_mess = ""
error_mess = ""
miss_mess = ""
# check different perofrmance markers
# how many faster than 200 ms repsonses? The threshold is chosen to be 10% of the total number of trials
if (sum(dclean$pp == j & dclean$rt < 200) > 72){
cat("pp ", j, " did", sum(dclean$pp == j & dclean$rt < 200), "super fast resp \n")
fast_mess = paste0("did ", sum(dclean$pp == j & dclean$rt < 200), " super fast responses; ")
}
# how many slower than 2000 ms repsonses?
if (sum(dclean$pp == j & dclean$rt > 2000) > 72){
cat("pp ", j, " did", sum(dclean$pp == j & dclean$rt > 2000), "very slow resp \n")
slow_mess = paste0("did ", sum(dclean$pp == j & dclean$rt > 2000), " very slow responses; ")
}
# how many errors?
if (sum(dclean$pp == j & dclean$error) > 72){
cat("pp ", j, " did", sum(dclean$pp == j & dclean$error), "errors \n")
error_mess = paste0("did ", sum(dclean$pp == j & dclean$error), " errors; ")
}
# how many misses? Here threshold is 90%,because the codition is reversed
if (sum(dclean$pp == j & dclean$Attempt == 1, na.rm = T) < 648){
cat("pp ", j, " did not answer to", sum(is.na(dclean$pp == j & dclean$Attempt == 0)), "trials \n")
miss_mess = paste0("did not answer to", sum(is.na(dclean$pp == j & dclean$Attempt == 0)), "trials; ")
}
# fill-in the logbook
logbook_df[logbook_df$pp == j, "message2"] <- paste0(fast_mess, slow_mess, error_mess, miss_mess)
# prompt the user with the remove question, only if the message2 is full and the remove is not 1 already!
if (logbook_df[logbook_df$pp == j, "message2"] != "" & logbook_df[logbook_df$pp == j, "remove"] == 0){
logbook_df[logbook_df$pp == j, "remove"] <- remove_him(j)
}
}
# select the interesting columns
demotemp <- demo[, c("pp", "questionKey", "Response")]
demotemp
# transfrom the dataset from long to wide
demotemp1 <- dcast(demotemp, pp ~ questionKey, value.var = "Response")
demotemp1
# change columns names to clearer names
names(demotemp1)[which(names(demotemp1) == "response-2")] <- "handedness"
# select only some of the answers (many are redudant)
demotemp1 <- demotemp1[, c("pp", "age", "sex", "country", "education", "response-2",
"response-3","psyKnowledge", "comment")]
# transfrom the dataset from long to wide
demotemp1 <- dcast(demotemp, pp ~ questionKey, value.var = "Response")
# select only some of the answers (many are redudant)
demotemp1 <- demotemp1[, c("pp", "age", "sex", "country", "education", "response-2",
"response-3","psyKnowledge", "comment")]
# change columns names to clearer names
names(demotemp1)[which(names(demotemp1) == "response-2")] <- "handedness"
names(demotemp1)[which(names(demotemp1) == "response-3")] <- "motherTongue"
# remove na if there are
demotemp1 <- demotemp1[!is.na(demotemp1$pp),]
# merge this demo dataframe with the logbook, matching the rows by pp ID
logbook_toExp <- merge(logbook_df, demotemp1, by = "pp")
View(logbook_toExp)
1440/2
d <- read.csv(paste0(dataDir, "B1_Pro1", ".csv"), sep = ";")
# write the path to your project folder
setwd('C://Users//Elena//Documents//AA_PhD//Projects//BRAC01_BRAC02//BRAC01-FirstOnline')
# define paths to further subfolders in the project folders (create them first)
dataDir = "data//"
figDir = "figures//"
tabDir = "tables//"
# a .R file with custom functions - define the path to it if different from the working directory
source("C://Users//Elena//Documents//AA_PhD//R//modelsFun.R")
d <- read.csv(paste0(dataDir, "B1_Pro1", ".csv"), sep = ";")
d1 <- read.csv(paste0(dataDir, "B1_RWTH_horiAA", ".csv"), sep = ";")
d <- rbind(d, d1)
# numbers of sw and rep
repSw <- as.data.frame(unique(d$pp))
names(repSw) <- "pp"
for (var in c("task_R", "correctResp_R", "colour_R")){
name_rep <- paste(var, "rep", sep = "")
name_sw <- paste(var, "sw", sep = "")
repSw[[name_rep]] <- 0
repSw[[name_sw]] <- 0
for (j in unique(d$pp)){
repSw[j,name_rep] <- sum(d$pp == j & d[, var] == 0)
repSw[j,name_sw] <- sum(d$pp == j & d[, var] == 1)
}
}
names(d)
for (var in c("task_R", "ANSWER_R", "cuecolor_R")){
name_rep <- paste(var, "rep", sep = "")
name_sw <- paste(var, "sw", sep = "")
repSw[[name_rep]] <- 0
repSw[[name_sw]] <- 0
for (j in unique(d$pp)){
repSw[j,name_rep] <- sum(d$pp == j & d[, var] == 0)
repSw[j,name_sw] <- sum(d$pp == j & d[, var] == 1)
}
}
#plot
repSw_long <- gather(repSw, "category", "frequency", task_Rrep:colour_Rsw)
# try if this works for your, otherwise load each package with the line below
if(!require(pacman)) install.packages("pacman")
pacman::p_load("haven", "dplyr", "lme4", "reshape2", "ggplot2", "wesanderson")
select <- dplyr::select
filter <- dplyr::filter
#plot
repSw_long <- gather(repSw, "category", "frequency", task_Rrep:colour_Rsw)
View(repSw)
View(repSw)
#plot
repSw_long <- gather(repSw, id.vars = "pp", measure.vars = c(2:9))
#plot
repSw_long <- melt(repSw, id.vars = "pp", measure.vars = c(2:9))
View(repSw_long)
View(repSw_long)
View(repSw)
unique(d$pp)
# numbers of sw and rep
repSw <- as.data.frame(unique(d$pp))
names(repSw) <- "pp"
View(repSw)
for (var in c("task_R", "ANSWER_R", "cuecolor_R")){
name_rep <- paste(var, "rep", sep = "")
name_sw <- paste(var, "sw", sep = "")
repSw[[name_rep]] <- 0
repSw[[name_sw]] <- 0
for (j in unique(d$pp)){
repSw[j,name_rep] <- sum(d$pp == j & d[, var] == 0)
repSw[j,name_sw] <- sum(d$pp == j & d[, var] == 1)
}
}
View(repSw)
dcrt <- dc[!is.na(dc$rt),]
dcrt <- d[!is.na(dc$rt),]
dcrt <- d[!is.na(d$rt),]
dcrt <- dcrt[(dcrt$task_R != 99 & dcrt$rt > 200),]
dcrt <- dcrt[!(dcrt$error == 1 | dcrt$error_R == 1),]
names(d)
# average RTs per condition - relevant variables
glblRel <- group_my(dcrt, rt, pp, task_R, ANSWER_R, colour_R)
# average RTs per condition - relevant variables
glblRel <- group_my(dcrt, rt, pp, task_R, ANSWER_R, cuecolor_R)
condtnsRel <- group_my(glblRel, meanrt, colour_R, correctResp_R,task_R)
# average RTs per condition - relevant variables
glblRel <- group_my(dcrt, rt, pp, task_R, ANSWER_R, cuecolor_R)
warnings()
dcrt$rt <- as.numeric(dcrt$rt)
d$rt <- as.numeric(d$rt)
dcrt <- d[!is.na(d$rt),]
dcrt <- dcrt[(dcrt$task_R != 99 & dcrt$rt > 200),]
dcrt <- dcrt[!(dcrt$error == 1 | dcrt$error_R == 1),]
dcrt$rt <- as.numeric(dcrt$rt)
# average RTs per condition - relevant variables
glblRel <- group_my(dcrt, rt, pp, task_R, ANSWER_R, cuecolor_R)
condtnsRel <- group_my(glblRel, meanrt, cuecolor_R, ANSWER_R,task_R)
# barplot
pd = position_dodge(.7)
ggplot(condtnsRel, aes(x= task_R, y = meanmeanrt, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanrt - se, ymax  = meanmeanrt + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
ylab("Mean RTs") +
xlab("Task sequence") +
facet_wrap(~cuecolor_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d$task_R <- as.factor(d$task_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d$cuecolor_R <- as.factor(d$cuecolor_R)
dcrt <- d[!is.na(d$rt),]
dcrt <- dcrt[(dcrt$task_R != 99 & dcrt$rt > 200),]
dcrt <- dcrt[!(dcrt$error == 1 | dcrt$error_R == 1),]
dcrt$rt <- as.numeric(dcrt$rt)
is.factor(dcrt$ANSWER_R)
# average RTs per condition - relevant variables
glblRel <- group_my(dcrt, rt, pp, task_R, ANSWER_R, cuecolor_R)
condtnsRel <- group_my(glblRel, meanrt, cuecolor_R, ANSWER_R,task_R)
ggplot(condtnsRel, aes(x= task_R, y = meanmeanrt, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanrt - se, ymax  = meanmeanrt + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
ylab("Mean RTs") +
xlab("Task sequence") +
facet_wrap(~cuecolor_R)
mod1 <- lmer(rt ~ task_R*ANSWER_R*cuecolor_R*cocoa + (1|pp), data= dcrt, REML=F)
summary(mod1)
length(unique(d$pp))
length(unique(dcrt$pp))
d <- read.csv(paste0(dataDir, "B1_Pro1", ".csv"), sep = ";")
d1 <- read.csv(paste0(dataDir, "B1_RWTH_horiAA", ".csv"), sep = ";")
d <- rbind(d, d1)
d$rt <- as.numeric(d$rt)
d$task_R <- as.factor(d$task_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d$cuecolor_R <- as.factor(d$cuecolor_R)
sum(!is.na(d$rt))
View(d)
sum(!is.na(d$rt))
d <- read.csv(paste0(dataDir, "B1_Pro1", ".csv"), sep = ";")
View(d)
d1 <- read.csv(paste0(dataDir, "B1_RWTH_horiAA", ".csv"), sep = ";")
View(d1)
sum(is.na(d1$rt))
sum(is.na(d$rt))
d <- rbind(d, d1)
sum(is.na(d$rt))
sum(d$rt > 100)
sum(d$rt == 0)
mean(d$rt)
mean(d$rt, na.rm = t)
is.numeric(d$rt)
d$rt <- as.numeric(d$rt)
sum(is.na(d$rt))
d <- read.csv(paste0(dataDir, "B1_Pro1", ".csv"), sep = ";")
d1 <- read.csv(paste0(dataDir, "B1_RWTH_horiAA", ".csv"), sep = ";")
d <- rbind(d, d1)
d$rt <- round(d$rt, 0)
class(d$rt)
d <- read.csv(paste0(dataDir, "B1_Pro1", ".csv"), sep = ";", dec = ",")
class(d$rt)
d1 <- read.csv(paste0(dataDir, "B1_RWTH_horiAA", ".csv"), sep = ";", dec = ",")
d <- rbind(d, d1)
class(d$rt)
mean(d$rt)
d$task_R <- as.factor(d$task_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d$cuecolor_R <- as.factor(d$cuecolor_R)
sum(is.na(d$rt))
summary(d$rt)
d[d$Attempt != 1, "rt"]
sum(d$rt == "NA")
class(d[d$Attempt != 1, "rt"])
sum(d$rt == NA)
sum(d$Attempt == 1)
sum(d$Attempt == 1, na.rm = T)
sum(d$task_R != 99)
sum(d$rt > 200)
drt <- d[(d$task_R != 99 & d$rt > 200 & d$Attempt == 1),]
drt <- d[(d$task_R != 99 & d$rt > 200 & d$Attempt == 1),]
View(drt)
dim(drt)
16512-16340
172/4
sum(drt$rt > 200)
sum(drt$task_R == 99)
sum(is.na(drt$task_R))
drt[is.na(drt$task_R),]
sum(is.na(drt$task_R))
148/43
which(is.na(drt$task_R))
# try if this works for your, otherwise load each package with the line below
if(!require(pacman)) install.packages("pacman")
pacman::p_load("haven", "dplyr", "lme4", "reshape2", "ggplot2", "wesanderson")
select <- dplyr::select
filter <- dplyr::filter
# write the path to your project folder
setwd('C://Users//Elena//Documents//AA_PhD//Projects//BRAC01_BRAC02//BRAC01-FirstOnline')
# define paths to further subfolders in the project folders (create them first)
dataDir = "data//"
figDir = "figures//"
tabDir = "tables//"
# a .R file with custom functions - define the path to it if different from the working directory
source("C://Users//Elena//Documents//AA_PhD//R//modelsFun.R")
d <- read.csv(paste0(dataDir, "B1_Pro1", ".csv"), sep = ";", dec = ",")
d1 <- read.csv(paste0(dataDir, "B1_RWTH_horiAA", ".csv"), sep = ";", dec = ",")
d <- rbind(d, d1)
d$task_R <- as.factor(d$task_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d$cuecolor_R <- as.factor(d$cuecolor_R)
drt <- d[(d$task_R != 99 & d$rt > 200 & d$Attempt == 1),]
drt <- dcrt[!(drt$error == 1 | drt$error_R == 1),]
drt <- drt[!(drt$error == 1 | drt$error_R == 1),]
sum(drt$task_R == 99)
sum(drt$task_R == 99, na.rm = TRUE)
View(drt)
View(d)
sum(is.na(d$task_R))
sum(is.na(d$pp))
table(d$task_R)
8176+8164+172
drt <- d[(d$task_R != 99 & d$rt > 200 & d$Attempt == 1),]
sum(is.na(drt$pp))
is.numeric(d$rt)
d$Attempt <- as.factor(d$Attempt)
drt <- d[(d$task_R != 99 & d$rt > 200 & d$Attempt == 1),]
sum(is.na(drt$pp))
sum((d$task_R != 99 & d$rt > 200 & d$Attempt == 1))
