ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)}
B= "ciao"
ggplot(condtnsRel, aes(x= task_R, y = meanmeanrt, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanrt - se, ymax  = meanmeanrt + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
coord_cartesian(ylim=c(600,950)) +
ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)
} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)
}else{facet_wrap(~context_R + cocoa)}
ggplot(condtnsRel, aes(x= task_R, y = meanlogRT, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanlogRT - se, ymax  = meanlogRT + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
coord_cartesian(ylim=c(600,950)) +
ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)
} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)
}else{facet_wrap(~context_R + cocoa)}
ggplot(condtnsRel, aes(x= task_R, y = meanmeanlogRT, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanlogRT - se, ymax  = meanmeanlogRT + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
coord_cartesian(ylim=c(600,950)) +
ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)
} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)
}else{facet_wrap(~context_R + cocoa)}
ggplot(condtnsRel, aes(x= task_R, y = meanmeanlogRT, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanlogRT - se, ymax  = meanmeanlogRT + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
#coord_cartesian(ylim=c(600,950)) +
ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)
} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)
}else{facet_wrap(~context_R + cocoa)}
ggplot(condtnsRel, aes(x= task_R, y = meanmeanlogRT, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanlogRT - se, ymax  = meanmeanlogRT + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
coord_cartesian(ylim=c(6,8)) +
ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)
} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)
}else{facet_wrap(~context_R + cocoa)}
ggplot(condtnsRel, aes(x= task_R, y = meanmeanlogRT, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanlogRT - se, ymax  = meanmeanlogRT + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
coord_cartesian(ylim=c(6,7)) +
ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)
} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)
}else{facet_wrap(~context_R + cocoa)}
ggplot(condtnsRel, aes(x= task_R, y = meanmeanlogRT, fill = ANSWER_R)) +
geom_col(width = 0.7, color = "black", position = pd) +
geom_errorbar(aes(ymin  = meanmeanlogRT - se, ymax  = meanmeanlogRT + se), width = 0.3, size  = 0.7, position = pd,color = "black") +
theme_bw() +
theme(axis.title = element_text(face = "bold")) +
coord_cartesian(ylim=c(6.25,6.75)) +
ylab("Mean RTs") +
xlab("Task sequence") +
if (B == "B1"){facet_wrap(~cuecolor_R + cocoa)
} else if (B== "B2"){facet_wrap(~framecolor_R + cocoa)
}else{facet_wrap(~context_R + cocoa)}
pacman::p_load("haven", "dplyr", "lme4", "reshape2", "ggplot2", "wesanderson", "afex", "ezANOVA")
dim(d)
d$counterbalance
unique(d$counterbalance)
d1 <- read.csv(paste0(dataDir, "B1_43pps", ".csv"), sep = ";", dec = ",")
d1$exp <- "BRAC1"
d1$map_horiAA300 <- 0
d1$map_horiAA300[d1$counterbalance == "horiAA_1st300"] <- 1
d2 <- read.csv(paste0(dataDir, "B2_43pps", ".csv"), sep = ";", dec = ",")
d2$map_horiAA300 <- 0
d2$map_horiAA300[d2$counterbalance == "BRAC2_horiAA_1st300"] <- 1
d2$exp <- "BRAC2"
names(d2)[names(d2) == "framecolor_R"] <- "context_R"
names(d1)[names(d1) == "cuecolor_R"] <- "context_R"
# d <- read.csv(paste0(dataDir, "B2_Pro1", ".csv"), sep = ";", dec = ",")
# demo <- read.csv(paste0(tabDir, "logbook_BRAC2_Pro1", ".csv"), sep = ";", dec = ",")
# d$prolific <- 1
# d1 <- read.csv(paste0(dataDir, "B2_RWTH1", ".csv"), sep = ";", dec = ",")
# demo1 <- read.csv(paste0(tabDir, "logbook_BRAC2_RWTH1", ".csv"), sep = ";", dec = ",")
# d1$prolific <- 0
#
d <- rbind(d1, d2)
# #demo <- demo[, names(demo1)]
# demo <- rbind(demo, demo1)
#
#
# for (j in unique(d$pp)){
#   d[d$pp == j, "age"] <- demo[demo$pp == j, "age"]
#   d[d$pp == j, "sex"]  <- demo[demo$pp == j, "sex"]
#   d[d$pp == j, "psyKnowledge"]  <- demo[demo$pp == j, "psyKnowledge"]
#   d[d$pp == j, "education"] <- demo[demo$pp == j, "education"]
#   d[d$pp == j, "handedness"]  <- demo[demo$pp == j, "handedness"]
#   # d[d$pp == j, "handedness"]  <- demo[demo$pp == j, "response.2"]
#   d[d$pp == j, "motherTongue"]  <- demo[demo$pp == j, "motherTongue"]
#   #d[d$pp == j, "motherTongue"]  <- demo[demo$pp == j, "response.3"]
#   d[d$pp == j, "country"] <- demo[demo$pp == j, "country"]
# }
#
#
# detect if it's brac01 or brac02 from the colour of frame and cue
if (length(unique(d$framecolor)) == 3){
B = "B1B2"
} else if (unique(d$framecolor)[1] == "black"){
B = "B1"
context = "cuecolor"
context_R = "cuecolor_R"
} else if (unique(d$cuecolor)[1] == "black"){
B = "B2"
context = "framecolor"
context_R = "framecolor_R"
}
print(B)
#
# for (p in c("GM4", "LU1", "LY8", "NE3", "NW8", "TO3", "UG7", "WI5", "XL2", "YF1", "5896f9951a06b50001a7ff12", "5b1fc3ae325d600001c03dcb", "5d5bcd6c0802ee001608c5a8", "5e4a932344498f4e361fee0d", "5ec3dd4a21dd590667039a02")){
#   d[d$pp == p, "counterbalance"] <- "horiAA_1st300"
# }
#
# d <- d[,-1]
#d <- d2
# adjust class of variables
d$task_R <- as.factor(d$task_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d[[context_R]] <- as.factor(d[[context_R]])
d$context_R <- as.factor(d$context_R)
d$Attempt <- as.factor(d$Attempt)
d$cocoa <- as.factor(d$cocoa)
d$counterbalance <- as.factor(d$counterbalance)
d$age <- as.numeric(d$age)
d$sex <- as.factor(d$sex)
d$psyKnowledge <- as.factor(d$psyKnowledge)
d$education <- as.factor(d$education)
d$handedness <- as.factor(d$handedness)
d$motherTongue <- as.factor(d$motherTongue)
d$country <- as.factor(d$country)
d$prolific <- as.factor(d$prolific)
d$map_horiAA300 <- as.factor(d$map_horiAA300)
#write.csv2(d, paste0(dataDir, "B2_43pps.csv"), row.names=FALSE)
#table(d$country)
d$country[d$country == "Wales"] <- "United Kingdom"
d$country[d$country == "England"] <- "United Kingdom"
d$country[d$country == "English"] <- "United Kingdom"
d$country[d$country == "Northern Ireland"] <- "United Kingdom"
d$country[d$country == "germany"] <- "Germany"
d$country[d$country == "italy"] <- "Italy"
d$country[d$country == "Netherlands"] <- "The Netherlands"
d$country[d$country == "poland"] <- "Poland"
d$country[d$country == "Portual"] <- "Portugal"
d$country[d$country == "EspaÃ±a"] <- "Spain"
d$country[d$country == "United States"] <- "USA"
#table(d$motherTongue)
d$motherTongue[d$motherTongue == "english"] <- "English"
d$motherTongue[d$motherTongue == "german"] <- "German"
d$motherTongue[d$motherTongue == "german"] <- "German"
d$motherTongue[d$motherTongue == "italian"] <- "Italian"
d$motherTongue[d$motherTongue == "Hungary"] <- "Hungarian"
d$motherTongue[d$motherTongue == "polish"] <- "Polish"
d$motherTongue[d$motherTongue == "portuguese"] <- "Portuguese"
d$motherTongue[d$motherTongue == "Portuguese (PT)"] <- "Portuguese"
# estimate age using other demographics - use this to replace missing ages
# estimate model
modAge <- lm(age ~ prolific + sex + psyKnowledge + education + country, data = d)
summary(modAge)
# predict values
d$predictedAge <- predict.lm(modAge, d)
# substitute na with the predicted - leave the other unchanged
noAgepps <- unique(d[is.na(d$age), "pp"])
for (j in noAgepps){
d[d$pp == j, "age"] <- d[d$pp == j, "predictedAge"]
}
#d2$age[is.na(d2$age)] <- dtot[is.na(dtot$age), "predictedAge"]
d <- d[d$exp == "BRAC1",]
mod1 <- lmer(logRT ~ task_R*ANSWER_R*cuecolor_R*cocoa + (1|pp), data= drt, REML=F)
# mod2 <- lmer(logRT ~ task_R*ANSWER_R*framecolor_R*cocoa + blockNum + age + sex + counterbalance +
#                handedness + (1|pp), data= drt, REML=F)
# either country or prolific, not both
mod2 <- lmer(logRT ~ task_R*ANSWER_R*context_R*cocoa + blockNum + age + sex + map_horiAA300 +
handedness + prolific + (1|pp), data= drt, REML=F)
summary(mod2)
B= "B1"
write.csv2(write_pvalues(mod2, "exp"), file= paste0(tabDir, B, "_mod2", ".csv"))
if(!require(pacman)) install.packages("pacman")
pacman::p_load("haven", "dplyr", "lme4", "reshape2", "ggplot2", "wesanderson", "afex", "emmeans")
select <- dplyr::select
filter <- dplyr::filter
# parameter for graphs
pd = position_dodge(.1)
# write the path to your project folder
setwd('C://Users//Elena//Documents//AA_PhD//Projects//BRAC01_BRAC02//BRAC01-FirstOnline')
# define paths to further subfolders in the project folders (create them first)
dataDir = "data//"
figDir = "figures//"
tabDir = "tables//"
# a .R file with custom functions - define the path to it if different from the working directory
source("C://Users//Elena//Documents//AA_PhD//Projects//expra2020_faces//modelsFun.R")
# Load and prepare D
B = "B1B2"
# Load B1 and pick 2 people form rwth only ----------------------------------------------------------------------
d_pro <- read.csv(paste0(dataDir, "B1_Pro", ".csv"), sep = ";", dec = ",")
d_pro$prolific <- 1
d_rwth <- read.csv(paste0(dataDir, "B1_RWTH", ".csv"), sep = ";", dec = ",")
d_rwth$prolific <- 0
# Pick 2 pps with horiAA_1st300
# We got too many with same counterbalance:
# I pick LU1 and LY8, the first male and a female with no warnings int he logbook
rwthLB <- read.csv2(paste0(tabDir, "logbook_B1_RWTH", ".csv"))
pps2keep <- rwthLB[rwthLB$mapping != "BRAC1_horiAA_1st300" | rwthLB$pp == "LU1" | rwthLB$pp == "LY8", "pp"]
pps2rem <- setdiff(unique(d_rwth$pp), pps2keep)
for (ppRem in pps2rem){
d_rwth <- d_rwth[!d_rwth$pp == ppRem, ]
}
d1 <- rbind(d_rwth, d_pro)
names(d1)[names(d1) == "cuecolor_R"] <- "context_R"
d1$exp <- "BRAC1"
# Load BRAC2 ---------------------------------------------------------------------------------------------
d_pro2 <- read.csv(paste0(dataDir, "B2_Pro", ".csv"), sep = ";", dec = ",")
d_pro2$prolific <- 1
d_rwth2 <- read.csv(paste0(dataDir, "B2_RWTH", ".csv"), sep = ";", dec = ",")
d_rwth2$prolific <- 0
d2 <- rbind(d_rwth2, d_pro2)
names(d2)[names(d2) == "framecolor_R"] <- "context_R"
d2$exp <- "BRAC2"
dtot <- rbind(d1, d2)
# Subset the dataset based on the B
if(B == "B1"){d <- dtot[dtot$exp == "BRAC1",]
}else if (B == "B2"){d <- dtot[dtot$exp == "BRAC2",]
}else if (B== "B"){d <- dtot}
# Change variables class ----------------------------------------------------------------------------------------
d$task_R <- as.factor(d$task_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d$context_R <- as.factor(d$context_R)
d$Attempt <- as.factor(d$Attempt)
d$cocoa <- as.factor(d$cocoa)
d$counterbalance <- as.factor(d$counterbalance)
d$age <- as.numeric(d$age)
d$sex <- as.factor(d$sex)
d$psyKnowledge <- as.factor(d$psyKnowledge)
d$education <- as.factor(d$education)
d$handedness <- as.factor(d$handedness)
d$motherTongue <- as.factor(d$motherTongue)
d$country <- as.factor(d$country)
d$prolific <- as.factor(d$prolific)
#d$map_horiAA300 <- as.factor(d$map_horiAA300)
d$rt <- as.numeric(d$rt)
# Prepare the 2 datsets for RTs and errors analyses -------------------------------------------------------
# create a column useful afterwards
d$respRepetitions <- 0
# fix the missing values of sex and handedness (1 pp) with most likely value
d$handedness[d$handedness == "Other (please specify)"] <- "right-handed"
d$sex[d$sex == "I'd rather not say"] <- "male"
# dataset clening for rts analyses
cat("Fast trials were", sum(d$rt < 200), "\n")
drt <- d[(d$task_R != 99 & d$rt > 200 & !is.na(d$Attempt == 1)),]
drt <- drt[!(drt$error == 1 | drt$error_R == 1),]
cat("In total removed", (dim(d)[1] - dim(drt)[1])/dim(d)[1], "of the observations \n")
for (j in unique(drt$pp)){
drt[drt$pp == j, "respRepetitions"] <- sum(drt$pp == j & drt$ANSWER_R == 0)
}
# dataset cleaing for error analyses
de <- d[d$task_R != 99 & d$rt > 200,]
# count resp repetitions
for (j in unique(de$pp)){
de[de$pp == j, "respRepetitions"] <- sum(de$pp == j & de$ANSWER_R == 0)
}
drt$respRepetitions <- as.numeric(drt$respRepetition)
de$respRepetitions <- as.numeric(de$respRepetition)
# stadardize these for error model --> helps it to converge
de$respRepetitions <- (de$respRepetitions - mean(de$respRepetitions))/sd(de$respRepetitions)
# Plot errors distr
dtot <- rbind(d1, d2)
if(B == "B1"){d <- dtot[dtot$exp == "BRAC1",]
}else if (B == "B2"){d <- dtot[dtot$exp == "BRAC2",]
}else if (B== "B1B2"){d <- dtot}
B = "B1B2"
#B = "B1"
#B = "B2"
# Load B1 and pick 2 people form rwth only ----------------------------------------------------------------------
d_pro <- read.csv(paste0(dataDir, "B1_Pro", ".csv"), sep = ";", dec = ",")
d_pro$prolific <- 1
d_rwth <- read.csv(paste0(dataDir, "B1_RWTH", ".csv"), sep = ";", dec = ",")
d_rwth$prolific <- 0
# Pick 2 pps with horiAA_1st300
# We got too many with same counterbalance:
# I pick LU1 and LY8, the first male and a female with no warnings int he logbook
rwthLB <- read.csv2(paste0(tabDir, "logbook_B1_RWTH", ".csv"))
pps2keep <- rwthLB[rwthLB$mapping != "BRAC1_horiAA_1st300" | rwthLB$pp == "LU1" | rwthLB$pp == "LY8", "pp"]
pps2rem <- setdiff(unique(d_rwth$pp), pps2keep)
for (ppRem in pps2rem){
d_rwth <- d_rwth[!d_rwth$pp == ppRem, ]
}
d1 <- rbind(d_rwth, d_pro)
names(d1)[names(d1) == "cuecolor_R"] <- "context_R"
d1$exp <- "BRAC1"
# Load BRAC2 ---------------------------------------------------------------------------------------------
d_pro2 <- read.csv(paste0(dataDir, "B2_Pro", ".csv"), sep = ";", dec = ",")
d_pro2$prolific <- 1
d_rwth2 <- read.csv(paste0(dataDir, "B2_RWTH", ".csv"), sep = ";", dec = ",")
d_rwth2$prolific <- 0
d2 <- rbind(d_rwth2, d_pro2)
names(d2)[names(d2) == "framecolor_R"] <- "context_R"
d2$exp <- "BRAC2"
dtot <- rbind(d1, d2)
# Subset the dataset based on the B
if(B == "B1"){d <- dtot[dtot$exp == "BRAC1",]
}else if (B == "B2"){d <- dtot[dtot$exp == "BRAC2",]
}else if (B== "B1B2"){d <- dtot}
Change variables class ----------------------------------------------------------------------------------------
d$task_R <- as.factor(d$task_R)
d$ANSWER_R <- as.factor(d$ANSWER_R)
d$context_R <- as.factor(d$context_R)
d$Attempt <- as.factor(d$Attempt)
d$cocoa <- as.factor(d$cocoa)
d$counterbalance <- as.factor(d$counterbalance)
d$age <- as.numeric(d$age)
d$sex <- as.factor(d$sex)
d$psyKnowledge <- as.factor(d$psyKnowledge)
d$education <- as.factor(d$education)
d$handedness <- as.factor(d$handedness)
d$motherTongue <- as.factor(d$motherTongue)
d$country <- as.factor(d$country)
d$prolific <- as.factor(d$prolific)
#d$map_horiAA300 <- as.factor(d$map_horiAA300)
d$rt <- as.numeric(d$rt)
# Prepare the 2 datsets for RTs and errors analyses -------------------------------------------------------
# create a column useful afterwards
d$respRepetitions <- 0
# fix the missing values of sex and handedness (1 pp) with most likely value
d$handedness[d$handedness == "Other (please specify)"] <- "right-handed"
d$sex[d$sex == "I'd rather not say"] <- "male"
# dataset clening for rts analyses
cat("Fast trials were", sum(d$rt < 200), "\n")
drt <- d[(d$task_R != 99 & d$rt > 200 & !is.na(d$Attempt == 1)),]
drt <- drt[!(drt$error == 1 | drt$error_R == 1),]
cat("In total removed", (dim(d)[1] - dim(drt)[1])/dim(d)[1], "of the observations \n")
for (j in unique(drt$pp)){
drt[drt$pp == j, "respRepetitions"] <- sum(drt$pp == j & drt$ANSWER_R == 0)
}
# dataset cleaing for error analyses
de <- d[d$task_R != 99 & d$rt > 200,]
# count resp repetitions
for (j in unique(de$pp)){
de[de$pp == j, "respRepetitions"] <- sum(de$pp == j & de$ANSWER_R == 0)
}
drt$respRepetitions <- as.numeric(drt$respRepetition)
de$respRepetitions <- as.numeric(de$respRepetition)
# stadardize these for error model --> helps it to converge
de$respRepetitions <- (de$respRepetitions - mean(de$respRepetitions))/sd(de$respRepetitions)
# Plot errors distribution acr
ppsWorse <- as.data.frame(pps[pps$meanmeanerror > (mean(pps$meanmeanerror) + sd(pps$meanmeanerror)*2), "pp"])
# calculate mean for each pp
errM <- group_my(d, error, pp, task_R, ANSWER_R, context_R, cocoa)
pps <- group_my(errM, meanerror, pp)
cat("Mean error rate was",  mean(pps$meanmeanerror), "plus or minus", sd(pps$meanmeanerror))
hist(pps$meanmeanerror, col=45, main = "Distribution of error rates", xlab= "error rate",
breaks = seq(0,0.3,0.01))
abline(v= mean(pps$meanmeanerror) + sd(pps$meanmeanerror)*2, col= "darkblue", lwd= 2, lty = "dashed")
ppsWorse <- as.data.frame(pps[pps$meanmeanerror > (mean(pps$meanmeanerror) + sd(pps$meanmeanerror)*2), "pp"])
ppsWorse
for (ppRem in ppsWorse$pp){
#print(ppRem)
drt <- drt[!drt$pp == ppRem, ]
de <- de[!de$pp == ppRem, ]
}
mod2 <- lmer(log(rt) ~ task_R*ANSWER_R*context_R*cocoa*exp + blockNum + sex + Participant.Browser +
Participant.OS +handedness + prolific + respRepetitions + (1|pp) + (1|stimulus),
data= drt, REML=F)
estMeans <- emmeans(
mod2, c("task_R", "ANSWER_R", "cocoa", "context_R", "exp"), lmer.df = "satterthwaite", data = drt,
type = "response")
B = "B1B2"
summary(mod2)
taskExp <- contrast(emmeans(mod2, ~ task_R*exp | context_R + cocoa + ANSWER_R),
interaction = "pairwise", type = "response")
taskExp
estMeans
754-676
790-735
# since "maxfun < 10 * length(par)^2 is not recommended." I set maxfun to 2e5
mode2 <- glmer(error ~ task_R*ANSWER_R*context_R*cocoa*exp + blockNum + sex + Participant.Browser +
Participant.OS +handedness + prolific + respRepetitions + (1|pp) + (1|stimulus),
family="binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)), data= de)
summary(mode2)
contCocoa <- contrast(emmeans(mode2, ~ context_R*cocoa | task_R + ANSWER_R ),
interaction = "pairwise", type = "response")
contCocoa
summary(estMeans)[summary(estMeans)$ANSWER_R == 0 & summary(estMeans)$task_R == 0,]
contCocoa <- contrast(emmeans(mode2, ~ context_R*cocoa | task_R + ANSWER_R + exp),
interaction = "pairwise", type = "response")
contCocoa
# more aggreated emmeans to calculate context sw cost independently from the study:
estMeans <- emmeans(mode2, c("task_R", "ANSWER_R", "context_R", "cocoa"), lmer.df = "satterthwaite",
data = drt, type = "response")
# more aggreated emmeans to calculate context sw cost independently from the study:
estMeans <- emmeans(mode2, c("task_R", "ANSWER_R", "context_R", "cocoa"), lmer.df = "satterthwaite",
data = de, type = "response")
estMeans
summary(estMeans)[summary(estMeans)$task_R == 0 & summary(estMeans)$ANSWER_R == 0, ]
0.05419536-0.05863769
0.06036260-0.04944820
summary(estMeans)[summary(estMeans)$task_R == 1 & summary(estMeans)$ANSWER_R == 0, ]
0.08086844-0.09225554
0.09685442-0.08854595
summary(estMeans)[summary(estMeans)$task_R == 0 & summary(estMeans)$ANSWER_R == 1, ]
0.04841053-0.03942334
0.04498487-0.05510288
summary(estMeans)[summary(estMeans)$task_R == 1 & summary(estMeans)$ANSWER_R == 1, ]
0.05642976-0.05975533
0.05470002-0.05931199
if(!require(pacman)) install.packages("pacman")
pacman::p_load("haven", "dplyr", "lme4", "reshape2", "ggplot2", "wesanderson", "afex", "emmeans", "tables")
predRT <- emmeans(mod2, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp"), lmer.df = "satterthwaite",
data = drt, type = "response")
predErr <- emmeans(mode2, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp"), lmer.df = "satterthwaite",
data = de, type = "response")
predRT <- emmeans(mod2, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp"), lmer.df = "satterthwaite",
data = drt, type = "response")
predRT
tabular( (Species + 1) ~ (n=1) + Format(digits=2)*
(Sepal.Length + Sepal.Width)*(mean + sd), data=iris )
iris
tabular((mean + sd) ~ (n=1) + Format(digits=2)*(exp*cocoa*context_R*ANSWER_R*task_R*), data = rawRTs)
tabular((mean + sd) ~ (n=1) + Format(digits=2)*exp*cocoa*context_R*ANSWER_R*task_R*, data = rawRTs)
rawRTs <- group_my(drt, rt, task_R, ANSWER_R, context_R, cocoa, exp)
rawRTs
predRT
rawRTs1 <- group_my(drt, rt, task_R, ANSWER_R, context_R, cocoa, exp, pp)
rawRTs <- group_my(rawRTs1, meanrt, task_R, ANSWER_R, context_R, cocoa, exp)
tabular((meanmeanrt + se) ~ (n=1) + Format(digits=2)*(exp*cocoa*context_R*ANSWER_R*task_R), data = rawRTs)
rawRTs
tabular((meanmeanrt + se) ~ (n=2) + Format(digits=2)*(exp*cocoa*context_R*ANSWER_R*task_R), data = rawRTs)
predER <- emmeans(mode2, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp"), lmer.df = "satterthwaite",
data = de, type = "response")
rawER1 <- group_my(de, error, task_R, ANSWER_R, context_R, cocoa, exp)
rawER <- group_my(rawER1, meanerror, exp, cocoa, context_R, ANSWER_R, task_R)
rawER <- rawER[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanrt", "n", "se")]
rawER <- rawER[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanrt", "n", "se")]
rawER <- rawER[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanerror", "n", "se")]
rawER
rawER <- group_my(rawER1, meanerror, exp, cocoa, context_R, ANSWER_R, task_R)
rawER
rawER1 <- group_my(de, error, task_R, ANSWER_R, context_R, cocoa, exp)
rawER1
rawER <- group_my(rawER1, meanerror, exp, cocoa, context_R, ANSWER_R, task_R)
rawER
rawER1 <- group_my(de, error, task_R, ANSWER_R, context_R, cocoa, exp, pp)
rawER <- group_my(rawER1, meanerror, exp, cocoa, context_R, ANSWER_R, task_R)
rawER
rawER <- rawER[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanerror", "n", "se")]
rawER
rawER <- as.data.frame(rawER[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanerror", "n", "se")])
rawER
t <- c(predRT, predER, rawRTs, rawER)
t
predRT <- summary(emmeans(mod2, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp"), lmer.df = "satterthwaite",
data = drt, type = "response"))
predRT
write.csv2(predRT[,c(1:6)], paste0(tabDir,"predRT"))
write.csv2(predRT[,c(1:6)], paste0(tabDir,"predRT"))
write.csv2(predRT[,c(1:6)], paste0(tabDir,"predRT.csv"))
write.table(predRT[,c(1:6)], paste0(tabDir,"predRT.csv"), row.names = F, sep = ";", dec = ".")
write.table(round(predRT[,c(1:6)], 2), paste0(tabDir,"predRT.csv"), row.names = F, sep = ";", dec = ".")
write.table(predRT[,c(1:6)], paste0(tabDir,"predRT.csv"), row.names = F, sep = ";", dec = ".")
predER <- summary(emmeans(mode2, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp"), lmer.df = "satterthwaite",
data = de, type = "response"))
write.table(predER[,c(1:6)], paste0(tabDir,"predER.csv"), row.names = F, sep = ";", dec = ".")
rawRTs1 <- group_my(drt, rt, task_R, ANSWER_R, context_R, cocoa, exp, pp)
rawRTs <- group_my(rawRTs1, meanrt, exp, cocoa, context_R, ANSWER_R, task_R)
rawRTs <- as.data.frame(rawRTs[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanrt", "n", "se")])
write.table(rawER, paste0(tabDir,"rawER.csv"), row.names = F, sep = ";", dec = ".")
rawER1 <- group_my(de, error, task_R, ANSWER_R, context_R, cocoa, exp, pp)
rawER <- group_my(rawER1, meanerror, exp, cocoa, context_R, ANSWER_R, task_R)
rawER <- as.data.frame(rawER[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanerror", "n", "se")])
write.table(rawER, paste0(tabDir,"rawER.csv"), row.names = F, sep = ";", dec = ".")
write.table(rawRT, paste0(tabDir,"rawER.csv"), row.names = F, sep = ";", dec = ".")
write.table(rawRTs, paste0(tabDir,"rawER.csv"), row.names = F, sep = ";", dec = ".")
rawER1 <- group_my(de, error, task_R, ANSWER_R, context_R, cocoa, exp, pp)
rawER <- group_my(rawER1, meanerror, exp, cocoa, context_R, ANSWER_R, task_R)
rawER <- as.data.frame(rawER[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanerror", "n", "se")])
write.table(rawER, paste0(tabDir,"rawER.csv"), row.names = F, sep = ";", dec = ".")
rawRTs1 <- group_my(drt, rt, task_R, ANSWER_R, context_R, cocoa, exp, pp)
rawRTs <- group_my(rawRTs1, meanrt, exp, cocoa, context_R, ANSWER_R, task_R)
rawRTs <- as.data.frame(rawRTs[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanrt", "n", "se")])
write.table(rawRTs, paste0(tabDir,"rawER.csv"), row.names = F, sep = ";", dec = ".")
rawRTs1 <- group_my(drt, rt, task_R, ANSWER_R, context_R, cocoa, exp, pp)
rawRTs <- group_my(rawRTs1, meanrt, exp, cocoa, context_R, ANSWER_R, task_R)
rawRTs <- as.data.frame(rawRTs[, c("task_R", "ANSWER_R", "context_R", "cocoa", "exp", "meanmeanrt", "n", "se")])
write.table(rawRTs, paste0(tabDir,"rawRTs.csv"), row.names = F, sep = ";", dec = ".")
write.table(rawER, paste0(tabDir,"rawER.csv"), row.names = F, sep = ";", dec = ".")
#postHoc <- contrast(estMeans, "consec", simple = "each", combine = TRUE, adjust = "mvt")
bindingEffect <- contrast(emmeans(mod2, ~ task_R*ANSWER_R | context_R + cocoa + exp),
interaction = "pairwise", type = "response")
bindingEffect
